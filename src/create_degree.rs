use std::path::PathBuf;

use crate::helpers;
use anyhow::Result as AnyhowResult;
use image::io::Reader as ImageReader;

pub fn create_degree(
    student_name: &str,
    note: &u32,
    rsa_key: &Option<String>,
    pem_file: &Option<PathBuf>,
) -> AnyhowResult<()> {
    let b_rsa_key = match pem_file {
        None => rsa_key.as_ref().unwrap().clone().as_bytes().to_vec(),
        Some(path) => helpers::get_rsa_key_from_file(path)?,
    };

    let mut img = ImageReader::open("./images/sources/Dipl.png")?
        .decode()?
        .to_rgba8();

    helpers::add_text(&mut img, "Diplôme", 380, 170, 72.0);
    helpers::add_text(&mut img, "master en cryptographie", 300, 240, 48.0);
    helpers::add_text(
        &mut img,
        &format!("{} a réussi comme un chef", student_name),
        300,
        300,
        32.0,
    );
    helpers::add_text(
        &mut img,
        &format!("avec un magnifique {:02}/20", note),
        340,
        350,
        32.0,
    );

    let conv_student_name = student_name.replace(' ', "_");

    let info_to_sign = format!("{} | {:02} ", conv_student_name, note);
    let info_to_sign = info_to_sign.as_bytes();
    let info_size = info_to_sign.len() as u8;

    let signature = helpers::sign_data(info_to_sign, &b_rsa_key)?;

    let binary = helpers::byte_to_binary(&[&[info_size], info_to_sign, &signature].concat());

    println!(
        "{} {} {:02} {:?}",
        info_size, conv_student_name, note, signature
    );

    helpers::hide_message_in_image(&mut img, &binary)?;

    img.save(format!("./images/targets/{}.png", conv_student_name))?;

    Ok(())
}

pub fn read_degree(
    image: &PathBuf,
    rsa_key: &Option<String>,
    pem_file: &Option<PathBuf>,
) -> AnyhowResult<()> {
    let b_rsa_key = match pem_file {
        None => rsa_key.as_ref().unwrap().clone().as_bytes().to_vec(),
        Some(path) => helpers::get_rsa_key_from_file(path)?,
    };

    let img = ImageReader::open(image)?.decode()?.to_rgba8();

    let full_message = helpers::read_message_in_image(&img)?;

    let len_message = full_message[0] as usize;

    let mut message: Vec<u8> = Vec::new();

    for byte in full_message.iter().skip(1).take(len_message) {
        message.push(*byte);
        print!("{}", *byte as char);
    }

    let mut signature: Vec<u8> = Vec::new();

    for byte in full_message.iter().skip(len_message + 1) {
        signature.push(*byte);
    }

    match helpers::verify_data(&message, &signature, &b_rsa_key)? {
        true => println!("\nThe degree is certified to be from NIHCAMCURT !"),
        false => println!("\nThe degree is corrupted or was not generated by NIHCAMCURT !"),
    }

    Ok(())
}
